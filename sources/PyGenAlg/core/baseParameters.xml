<PYGA_BaseParameters>
    <Parameter name="population_size">
        <Default_Value>50</Default_Value>
        <Category>"General"</Category>
        <Description>"Population size"</Description>
        <Check_Method>def checkPopSize(self, popSize):
    # Check if the given population size is a positive integer
    if type(popSize) != type(0):
        raise PYGA_ParametersError, 'ERROR: Population size must be an integer.'
    if popSize &lt; 0:
        raise PYGA_ParametersError, 'ERROR: Population size must be positive.'</Check_Method>
        <Keywords>['POPSIZE', 'POPULATIONSIZE', 'POP_SIZE', 'POPULATION_SIZE']</Keywords>
    </Parameter>
    <Parameter name="nb_generations">
        <Default_Value>100</Default_Value>
        <Category>"General.Stopping criteria"</Category>
        <Description>"Number of generations"</Description>
        <Check_Method>def checkNbGen(self, nbGen):
    # Check if the given number of generation is positive integer
    if type(nbGen) != type(0):
        raise PYGA_ParametersError, 'ERROR: Number of maximum generation must be an integer.'
    if nbGen &lt; 0:
        raise PYGA_ParametersError, 'ERROR: Number of maximum generation must be positive (0 for endless loop).'</Check_Method>
        <Keywords>['NBGEN', 'NBGENERATION', 'NBGENS', 'NBGENERATIONS', 'NB_GEN', 'NB_GENERATION', 'NB_GENS', 'NB_GENERATIONS']</Keywords>
    </Parameter>
    <Parameter name="del_duplicated_indiv">
        <Default_Value>False</Default_Value>
        <Category>"Reproduction"</Category>
        <Description>"Deletes duplicated individuals"</Description>
        <Check_Method>def checkDelDuplicatedIndiv(self, b):
    if type(b) != type(True):
        error = 'ERROR: delDuplicatedIndiv must be a boolean\n'
        raise PYGA_ParametersError, error</Check_Method>
        <Keywords>['DEL_DUPLICATED_INDIVIDUALS', 'DELDUPLICATED_INDIVIDUALS', 'DEL_DUPLICATEDINDIVIDUALS', 'DELDUPLICATEDINDIVIDUALS', 'DEL_DUPLICATED_INDIV', 'DELDUPLICATED_INDIV', 'DEL_DUPLICATEDINDIV', 'DELDUPLICATEDINDIV']</Keywords>
    </Parameter>
    <Parameter name="del_dupl_nb_try">
        <Default_Value>20</Default_Value>
        <Category>"Reproduction"</Category>
        <Description>"Deletes duplicated individuals number of try"</Description>
        <Check_Method>def checkDelDuplicatedNbTryIndiv(self, b):
    if type(b) != type(0) or b &lt;= 0:
        error = 'ERROR: delDuplNbTry must be a positive integer\n'
        raise PYGA_ParametersError, error</Check_Method>
        <Keywords>['DEL_DUPL_NB_TRY',"DEL_DUPL_NBTY", "DEL_DUPLNBTRY", "DELDUPLNBTRY", "DELDUPLNB_TRY","DELDUPL_NB_TRY","DEL_DUPLNB_TRY","DELDUPL_NBTRY"]</Keywords>
    </Parameter>
    <Parameter name="max_process">
        <Default_Value>1</Default_Value>
        <None_Value>1</None_Value>
        <None_Description>"No parallelization"</None_Description>
        <Category>"General.Fitness parallelization"</Category>
        <Description>"Maximum number of parallel fitness (0 for maximum)"</Description>
        <Check_Method>def checkMaxProcess(self, nbProc):
    try:
        nbProc = int(nbProc)
    except:
        error = 'ERROR: Maximum parallel fitness must be an integer.'
        raise PYGA_ParametersError, error
    if nbProc &lt; 0:
        error = 'ERROR: Maximum parallel fitness must be a positive integer (0 for maximum, 1 for no parallelisation).'
        raise PYGA_ParametersError, error</Check_Method>
        <Keywords>['MAX_PROCESS', 'MAXPROCESS', 'MAX_PARALLEL_FITNESS', 'MAXPARALLELFITNESS']</Keywords>
    </Parameter>
</PYGA_BaseParameters>